#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

working_dir="$(dirname ${0})"

source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

if [[ -z ${1+x} ]]; then
  message_error "Backup filename is not provided. Provide one and try again"
  exit 1
fi

backup_filename="${BACKUP_DIR_PATH}/${1}"

if [[ ! -f "${backup_filename}" ]]; then
  message_error "No backup with the specified filename."
  exit 1
fi

message_welcome "Restoring the '${POSTGRES_DB}' databse from '${backup_filename}' backup..."

if [[ "${POSTGRES_USER}" == 'postgres' ]]; then
  message_error "Restoring as 'postgres' user is not allowed. Assign 'POSTGRES_USER' env and try again"
  exit 1
fi

export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGDATABASE="${POSTGRES_DB}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"

message_info "Dropping the database..."
dropdb "${PGDATABASE}"

message_info "Creating a new database..."
createdb --owner="${PGUSER}"

message_info "Applying the backup to the new database..."
gunzip -c "${backup_filename}" | psql "${POSTGRES_DB}"

message_success "The '${POSTGRES_DB}' database has been restored successfully from the '${backup_filename}'."